spring:
  application:
    name: project-service

  datasource:
    url: jdbc:mysql://localhost:3306/${DB_SCHEMA}?serverTimezone=Asia/Seoul&characterEncoding=UTF-8
    driver-class-name: com.mysql.cj.jdbc.Driver
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  elasticsearch:
    uris: http://localhost:9200
    connection-timeout: 5s
    socket-timeout: 30s
  data:
    elasticsearch:
      repositories:
        enabled: true

  sql:
    init:
      mode: always

  jpa:
    hibernate:
      ddl-auto: create-drop
    defer-datasource-initialization: true
    show-sql: true
    database-platform: org.hibernate.dialect.MySQL8Dialect
    properties:
      hibernate:
        format_sql: true
        jdbc:
          batch_size: 50
          default_batch_fetch_size: 100
        order_inserts: true
        order_updates: true
  kafka:
    bootstrap-servers: localhost:9092
    producer:
      # 메시지의 key 직렬화 방식 : 자바 객체를 문자열(String)로 변환해서 Kafka에 전송
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 메시지의 value 직렬화 방식 : 자바 객체를 문자열(String)로 변환해서 Kafka에 전송
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 여러 파티션에 메시지를 저장할 때의 방식 (라운드 로빈 방식)
      properties:
        partitioner.class: org.apache.kafka.clients.producer.RoundRobinPartitioner

  thymeleaf:
    enabled: false

  cloud:
    discovery:
      enabled: true
    loadbalancer:
      ribbon:
        enabled: false



springdoc:
  api-docs:
    version: openapi_3_0
    enabled: true
    path: /v3/api-docs
  default-consumes-media-type: application/json
  default-produces-media-type: application/json
  swagger-ui:
    enabled: true
    path: /swagger-ui.html

server:
  port: 0

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_DEFAULTZONE}
    register-with-eureka: true
    fetch-registry: true

logging:
  level:
    org.elasticsearch.client: TRACE

app:
  kafka:
    topic: project-events
